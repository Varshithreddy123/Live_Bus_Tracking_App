import React, { useCallback, useEffect, useState } from 'react';
import {
  View,
  KeyboardAvoidingView,
  Platform,
  TouchableOpacity,
  Text,
  Pressable,
  ScrollView,
  Alert,
  ActivityIndicator,
  TextInput,
  FlatList,
} from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import MapViewDirections from 'react-native-maps-directions';
import _ from 'lodash';
import moment from 'moment';
import styles from './styles';
import { external } from '@/styles/external.style';
import { windowHeight, windowWidth } from '@/themes/app.constant';
import { Clock, LeftArrow, PickLocation } from '@/utils/icons';
import { router } from 'expo-router';
import color from '@/themes/app.colors';
import DownArrow from '@/assets/icons/downArrow';
import PlaceHolder from '@/assets/icons/placeHolder';
import * as Location from 'expo-location';

export default function RidePlanScreen() {
  const [region, setRegion] = useState({
    latitude: 37.78825,
    longitude: -122.4324,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [marker, setMarker] = useState<any>(null);
  const [currentLocation, setCurrentLocation] = useState<any>(null);
  const [locationPermission, setLocationPermission] = useState<'granted' | 'denied' | 'undetermined'>('undetermined');
  const [places, setPlaces] = useState<any[]>([]);
  const [query, setQuery] = useState('');
  const [keyboardAvoidHeight, setKeyboardAvoidHeight] = useState(false);
  const [locationSelected, setLocationSelected] = useState(false);
  const [travelInfo, setTravelInfo] = useState<any>(null);
  const [loadingTravelTime, setLoadingTravelTime] = useState(false);
  const [distanceKm, setDistanceKm] = useState<number | null>(null);
  const [etaUserMinutes, setEtaUserMinutes] = useState<number | null>(null);
  const [arrivalTimeUser, setArrivalTimeUser] = useState<string | null>(null);
  const PER_KM_RATE_RS = 5; // Rs per km
  const [currentLocationName, setCurrentLocationName] = useState('Detecting...');
  const [destinationName, setDestinationName] = useState('');
  const [buses, setBuses] = useState<any[]>([]);
  const [loadingBuses, setLoadingBuses] = useState(false);
  const [showBusSection, setShowBusSection] = useState(false);

  const GOOGLE_MAPS_API_KEY = process.env.EXPO_PUBLIC_GOOGLE_CLOUD_API_KEY!;

  // ✅ Debounced place search using Google Places API
  const fetchPlaces = useCallback(
    _.debounce(async (input: string) => {
      if (!input || input.length < 3) {
        setPlaces([]);
        return;
      }

      try {
        const response = await fetch(
          `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${encodeURIComponent(
            input
          )}&key=${GOOGLE_MAPS_API_KEY}&language=en`
        );

        const data = await response.json();
        if (data.status === 'OK' && Array.isArray(data.predictions)) {
          setPlaces(data.predictions);
        } else {
          console.warn('Google Places Error:', data.status);
          setPlaces([]);
        }
      } catch (error) {
        console.error('Fetch places error:', error);
        setPlaces([]);
      }
    }, 600),
    [GOOGLE_MAPS_API_KEY]
  );

  // ✅ Trigger the fetch when query changes
  useEffect(() => {
    if (query.length > 2) {
      fetchPlaces(query);
    } else {
      setPlaces([]);
    }
  }, [query, fetchPlaces]);

  // ✅ Haversine distance (km)
  const haversineKm = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const R = 6371; // km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI/180) * Math.cos(lat2 * Math.PI/180) *
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  // ✅ Compute user ETA (minutes) and arrival time string given travelInfo and now
  const computeUserEta = (mode: 'driving' | 'transit' | 'walking' = 'driving') => {
    try {
      const sec = travelInfo?.[mode]?.durationValue as number | undefined;
      if (!sec || !Number.isFinite(sec)) return { minutes: null, arriveAt: null };
      const minutes = Math.round(sec / 60);
      const arriveAt = moment().add(sec, 'seconds').format('HH:mm');
      return { minutes, arriveAt };
    } catch {
      return { minutes: null, arriveAt: null };
    }
  };

  // ✅ Parse HH:MM or locale time strings to Date today (best-effort)
  const parseTimeToToday = (t?: string | null) => {
    if (!t) return null;
    // Try parsing flexible time inputs with moment
    // Accepts formats like '8:30 PM', '20:30', or localized variants
    const m1 = moment(t, [moment.ISO_8601, 'h:mm A', 'HH:mm', 'h:mmA'], true);
    if (m1.isValid()) {
      const m2 = moment().hour(m1.hour()).minute(m1.minute()).second(0).millisecond(0);
      return m2.toDate();
    }
    // Fallback: try composing with today's date
    const composed = moment(`${moment().format('YYYY-MM-DD')} ${t}`, ['YYYY-MM-DD h:mm A', 'YYYY-MM-DD HH:mm'], true);
    if (composed.isValid()) return composed.toDate();
    return null;
  };

  // ✅ Compute bus arrival at user and at destination (best-effort using provided times)
  const computeBusTimes = (bus: any) => {
    const dep = parseTimeToToday(bus?.departureTime);
    const arr = parseTimeToToday(bus?.arrivalTime);
    let toUserMinutes: number | null = null;
    let toDestMinutes: number | null = null;
    let arriveAtUser: string | null = null;
    let arriveAtDest: string | null = null;

    const now = moment();
    if (dep && moment(dep).isAfter(now)) {
      toUserMinutes = Math.max(0, Math.round(moment(dep).diff(now, 'minutes', true)));
      arriveAtUser = moment(dep).format('HH:mm');
    }
    if (arr && moment(arr).isAfter(now)) {
      toDestMinutes = Math.max(0, Math.round(moment(arr).diff(now, 'minutes', true)));
      arriveAtDest = moment(arr).format('HH:mm');
    }

    return { toUserMinutes, toDestMinutes, arriveAtUser, arriveAtDest };
  };

  // ✅ Reverse Geocode to get location name
  const reverseGeocode = async (
    latitude: number,
    longitude: number,
    isDestination = false
  ) => {
    try {
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${GOOGLE_MAPS_API_KEY}`
      );
      const data = await response.json();
      if (data.status === 'OK' && Array.isArray(data.results) && data.results.length > 0) {
        const address = data.results[0].formatted_address;
        if (isDestination) {
          setDestinationName(address);
        } else {
          setCurrentLocationName(address);
        }
      }
    } catch (error) {
      console.error('Reverse geocode error:', error);
      if (isDestination) {
        setDestinationName('Destination');
      } else {
        setCurrentLocationName('Current Location');
      }
    }
  };

  // ✅ Request location permission and get current position on mount
  useEffect(() => {
    (async () => {
      try {
        const { status } = await Location.requestForegroundPermissionsAsync();
        setLocationPermission(
          status === Location.PermissionStatus.GRANTED ? 'granted' : 'denied'
        );

        if (status !== Location.PermissionStatus.GRANTED) {
          console.warn('Location permission denied');
          Alert.alert(
            'Permission Required',
            'Location permission is required to show your current location.'
          );
          return;
        }

        const loc = await Location.getCurrentPositionAsync({
          accuracy: Location.Accuracy.Balanced,
        });

        const { latitude, longitude } = loc.coords;
        const nextRegion = {
          latitude,
          longitude,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        };

        setCurrentLocation({ latitude, longitude });
        setRegion(nextRegion);
        setMarker({ latitude, longitude });

        // Get current location name
        await reverseGeocode(latitude, longitude, false);
        setDistanceKm(null);
        setEtaUserMinutes(null);
        setArrivalTimeUser(null);
      } catch (e) {
        console.error('Error getting current location:', e);
        Alert.alert(
          'Location Error',
          'Unable to detect your current location. Please enable location services and try again.'
        );
      }
    })();
  }, []);

  // ✅ Fetch available buses between origin and destination via backend
  const fetchAvailableBuses = async (origin: any, destination: any) => {
    setLoadingBuses(true);
    try {
      // Use resolved names for from/to to match backend BusStand search
      const fromName = encodeURIComponent(currentLocationName || '');
      const toName = encodeURIComponent(destinationName || '');

      if (!fromName || !toName) {
        setBuses([]);
        return;
      }

      // Configure API base URL; adjust to your environment if needed
      const API_BASE = process.env.EXPO_PUBLIC_API_BASE_URL || 'http://localhost:3000';
      const url = `${API_BASE}/bus/available?from=${fromName}&to=${toName}`;

      const response = await fetch(url);
      const data = await response.json();

      if (response.ok && data?.success && Array.isArray(data.data)) {
        const mapped = data.data.map((r: any) => ({
          id: r.id,
          busName: r.name || (r.busNumber ? `Route ${r.busNumber}` : 'Route'),
          busNumber: r.busNumber || 'N/A',
          from: r.fromStop?.name || 'Unknown',
          to: r.toStop?.name || 'Unknown',
          departureTime: r.fromStop?.eta || 'N/A',
          arrivalTime: r.toStop?.eta || 'N/A',
          duration: 'N/A',
          numStops: 0,
          headsign: 'N/A',
        }));
        setBuses(mapped);
      } else {
        console.warn('Backend bus fetch failed', data);
        setBuses([]);
      }
    } catch (error) {
      console.error('Error fetching buses from backend:', error);
      setBuses([]);
    } finally {
      setLoadingBuses(false);
    }
  };

  // ✅ Fetch travel times for driving, transit (bus), and walking
  const fetchTravelTimes = async (origin: any, destination: any) => {
    setLoadingTravelTime(true);
    try {
      const originStr = `${origin.latitude},${origin.longitude}`;
      const destStr = `${destination.latitude},${destination.longitude}`;

      // Fetch for multiple modes: driving, transit, walking
      const modes = ['driving', 'transit', 'walking'];
      const requests = modes.map((mode) =>
        fetch(
          `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${originStr}&destinations=${destStr}&mode=${mode}&key=${GOOGLE_MAPS_API_KEY}`
        )
          .then((res) => res.json())
          .catch((err) => {
            console.error(`Error fetching ${mode}:`, err);
            return null;
          })
      );

      const results = await Promise.all(requests);

      const travelData: any = {
        driving: null,
        transit: null,
        walking: null,
      };

      results.forEach((data, index) => {
        if (
          data &&
          data.status === 'OK' &&
          Array.isArray(data.rows) &&
          data.rows[0]?.elements?.[0]?.status === 'OK'
        ) {
          const element = data.rows[0].elements[0];
          travelData[modes[index]] = {
            duration: element.duration?.text || 'N/A',
            distance: element.distance?.text || 'N/A',
            durationValue: element.duration?.value || 0, // in seconds
          };
        }
      });

      setTravelInfo(travelData);
    } catch (error) {
      console.error('Error fetching travel times:', error);
      Alert.alert('Error', 'Unable to fetch travel time information.');
    } finally {
      setLoadingTravelTime(false);
    }
  };

  const handleInputChange = (text: string) => {
    setQuery(text);
  };

  // ✅ Handle place selection from custom autocomplete
  const handlePlaceSelect = async (placeId: string) => {
    try {
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&key=${GOOGLE_MAPS_API_KEY}`
      );

      const data = await response.json();

      if (data.status === 'OK' && data.result?.geometry?.location) {
        const location = data.result.geometry.location;
        const selectedDestination = {
          latitude: location.lat,
          longitude: location.lng,
        };

        setRegion({
          latitude: selectedDestination.latitude,
          longitude: selectedDestination.longitude,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        });

        setMarker({
          latitude: selectedDestination.latitude,
          longitude: selectedDestination.longitude,
        });

        setPlaces([]);
        setQuery('');
        setLocationSelected(true);
        setKeyboardAvoidHeight(false);

        // Get destination name
        await reverseGeocode(
          selectedDestination.latitude,
          selectedDestination.longitude,
          true
        );

        if (currentLocation) {
          await fetchTravelTimes(currentLocation, selectedDestination);
          await fetchAvailableBuses(currentLocation, selectedDestination);
          const d = haversineKm(currentLocation.latitude, currentLocation.longitude, selectedDestination.latitude, selectedDestination.longitude);
          setDistanceKm(Number.isFinite(d) ? d : null);
          const { minutes, arriveAt } = computeUserEta('driving');
          setEtaUserMinutes(minutes);
          setArrivalTimeUser(arriveAt);
          setShowBusSection(true);
        }
      }
    } catch (error) {
      console.error('Error fetching place details:', error);
      Alert.alert('Error', 'Unable to fetch place details. Please try again.');
    }
  };

  // ✅ Render individual bus card
  const renderBusCard = ({ item }: { item: any }) => {
    const busTimes = computeBusTimes(item);
    return (
    <View
      style={{
        backgroundColor: '#FFF',
        borderRadius: 12,
        padding: windowWidth(16),
        marginBottom: windowHeight(12),
        borderWidth: 1,
        borderColor: '#E0E0E0',
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      }}
    >
      {/* Bus Header */}
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'center',
          marginBottom: windowHeight(12),
        }}
      >
        <View
          style={{
            backgroundColor: '#2371F0',
            paddingHorizontal: windowWidth(12),
            paddingVertical: windowHeight(6),
            borderRadius: 8,
          }}
        >
          <Text style={{ color: '#FFF', fontWeight: 'bold', fontSize: 16 }}>
            🚌 {item.busNumber}
          </Text>
        </View>
        <View style={{ flex: 1, marginLeft: windowWidth(12) }}>
          <Text
            style={{
              fontSize: 15,
              fontWeight: '600',
              color: color.primaryText,
            }}
          >
            {item.busName}
          </Text>
          {item.headsign !== 'N/A' && (
            <Text style={{ fontSize: 12, color: color.secondaryText }}>
              → {item.headsign}
            </Text>
          )}
        </View>
      </View>

      {/* From Location */}
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'flex-start',
          marginBottom: windowHeight(8),
        }}
      >
        <View
          style={{
            width: 8,
            height: 8,
            borderRadius: 4,
            backgroundColor: '#4CAF50',
            marginTop: 6,
            marginRight: windowWidth(8),
          }}
        />
        <View style={{ flex: 1 }}>
          <Text style={{ fontSize: 12, color: color.secondaryText }}>
            From
          </Text>
          <Text
            style={{
              fontSize: 14,
              fontWeight: '600',
              color: color.primaryText,
            }}
          >
            {item.from}
          </Text>
          <Text
            style={{
              fontSize: 13,
              color: '#4CAF50',
              fontWeight: '600',
              marginTop: 2,
            }}
          >
            Departure: {item.departureTime}
          </Text>
        </View>
      </View>

      {/* Journey Info */}
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'center',
          marginLeft: windowWidth(16),
          marginBottom: windowHeight(8),
        }}
      >
        <View
          style={{
            width: 2,
            height: windowHeight(30),
            backgroundColor: '#DDD',
            marginRight: windowWidth(6),
          }}
        />
        <View>
          <Text style={{ fontSize: 12, color: color.secondaryText }}>
            {item.duration} • {item.numStops} stops
          </Text>
        </View>
      </View>

      {/* To Location */}
      <View
        style={{
          flexDirection: 'row',
          alignItems: 'flex-start',
        }}
      >
        <View
          style={{
            width: 8,
            height: 8,
            borderRadius: 4,
            backgroundColor: '#F44336',
            marginTop: 6,
            marginRight: windowWidth(8),
          }}
        />
        <View style={{ flex: 1 }}>
          <Text style={{ fontSize: 12, color: color.secondaryText }}>To</Text>
          <Text
            style={{
              fontSize: 14,
              fontWeight: '600',
              color: color.primaryText,
            }}
          >
            {item.to}
          </Text>
          <Text
            style={{
              fontSize: 13,
              color: '#F44336',
              fontWeight: '600',
              marginTop: 2,
            }}
          >
            Arrival: {item.arrivalTime}
          </Text>
        </View>
      </View>
    {/* Bus timing summary */}
      <View style={{ marginTop: windowHeight(8) }}>
        <Text style={{ fontSize: 12, color: color.secondaryText }}>
          {busTimes.toUserMinutes !== null ? `⏱ Reaches boarding stop in ${busTimes.toUserMinutes} min` : '⏱ Reaches boarding stop: N/A'}
        </Text>
        <Text style={{ fontSize: 12, color: color.secondaryText }}>
          {busTimes.arriveAtUser ? `🕒 At: ${busTimes.arriveAtUser}` : ''}
        </Text>
        <Text style={{ fontSize: 12, color: color.secondaryText, marginTop: 2 }}>
          {busTimes.toDestMinutes !== null ? `🏁 Arrives destination in ${busTimes.toDestMinutes} min` : '🏁 Arrives destination: N/A'}
        </Text>
        <Text style={{ fontSize: 12, color: color.secondaryText }}>
          {busTimes.arriveAtDest ? `🕒 At: ${busTimes.arriveAtDest}` : ''}
        </Text>
      </View>
    </View>
  );
}

  return (
    <KeyboardAvoidingView
      style={[external.fx_1]}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
    >
      <View style={{ flex: 1 }}>
        {/* --- Map Section --- */}
        <View style={{ flex: 1 }}>
          <MapView
            style={{ flex: 1 }}
            region={region}
            onPress={async (e) => {
              const coordinate = e.nativeEvent.coordinate;
              setMarker(coordinate);
              if (currentLocation) {
                await fetchTravelTimes(currentLocation, coordinate);
                await fetchAvailableBuses(currentLocation, coordinate);
                const d = haversineKm(currentLocation.latitude, currentLocation.longitude, coordinate.latitude, coordinate.longitude);
                setDistanceKm(Number.isFinite(d) ? d : null);
                const { minutes, arriveAt } = computeUserEta('driving');
                setEtaUserMinutes(minutes);
                setArrivalTimeUser(arriveAt);
                setShowBusSection(true);
                reverseGeocode(
                  coordinate.latitude,
                  coordinate.longitude,
                  true
                );
              }
            }}
            // Avoid over-controlling region to reduce render issues
            onRegionChangeComplete={(newRegion) => setRegion(newRegion)}
          >
            {marker && <Marker coordinate={marker} title="Destination" />}
            {currentLocation && (
              <Marker
                coordinate={currentLocation}
                pinColor="green"
                title="You are here"
              />
            )}
            {currentLocation && marker && GOOGLE_MAPS_API_KEY ? (
              <MapViewDirections
                origin={currentLocation}
                destination={marker}
                apikey={GOOGLE_MAPS_API_KEY}
                strokeWidth={3}
                strokeColor="blue"
              />
            ) : null}
          </MapView>
        </View>

        {/* --- Bottom Info Section --- */}
        <View
          style={[
            styles.infoContainer,
            {
              paddingHorizontal: windowWidth(16),
              paddingTop: windowHeight(12),
              paddingBottom: windowHeight(20),
            },
          ]}
        >
          {/* Header */}
          <View style={{ flexDirection: 'row', alignItems: 'center' }}>
            <View style={{ width: 48 }}>
              <TouchableOpacity
                onPress={() => router.back()}
                style={{
                  backgroundColor: '#fff',
                  borderRadius: 24,
                  padding: 8,
                  elevation: 3,
                  alignSelf: 'flex-start',
                }}
              >
                <LeftArrow />
              </TouchableOpacity>
            </View>
            <View style={{ flex: 1, alignItems: 'center' }}>
              <Text style={{ fontSize: windowWidth(22), fontWeight: '600' }}>
                Ride Plan
              </Text>
            </View>
            <View style={{ width: 48 }} />
          </View>

          {/* --- Travel Time Section --- */}
          <TouchableOpacity
            style={{
              width: '100%',
              minHeight: windowHeight(48),
              borderRadius: 12,
              backgroundColor: color.lightGray,
              marginTop: windowHeight(12),
              paddingHorizontal: windowWidth(12),
              paddingVertical: windowHeight(12),
            }}
            onPress={() => {
              if (travelInfo) {
                Alert.alert(
                  'Travel Information',
                  `Car: ${travelInfo.driving?.duration || 'N/A'}\nBus: ${
                    travelInfo.transit?.duration || 'N/A'
                  }\nWalking: ${travelInfo.walking?.duration || 'N/A'}`
                );
              }
            }}
          >
            {loadingTravelTime ? (
              <View style={{ alignItems: 'center', justifyContent: 'center' }}>
                <ActivityIndicator size="small" color={color.primaryText} />
                <Text style={{ marginTop: 8, color: color.secondaryText }}>
                  Calculating travel time...
                </Text>
              </View>
            ) : travelInfo ? (
              <View>
                <View
                  style={{
                    flexDirection: 'row',
                    alignItems: 'center',
                    marginBottom: 8,
                  }}
                >
                  <Clock />
                  <Text
                    style={{
                      fontSize: windowWidth(14),
                      fontWeight: '600',
                      color: color.primaryText,
                      marginLeft: windowWidth(8),
                      flex: 1,
                    }}
                  >
                    🚗 {travelInfo.driving?.duration || 'N/A'} • 🚌 {travelInfo.transit?.duration || 'N/A'} • 🚶 {travelInfo.walking?.duration || 'N/A'}{distanceKm !== null ? ` • 📏 ${distanceKm.toFixed(2)} km` : ''}{etaUserMinutes !== null ? ` • ETA: ${etaUserMinutes} min` : ''}{arrivalTimeUser ? ` • Arrive: ${arrivalTimeUser}` : ''}{distanceKm !== null ? ` • 💵 Rate: ₹${PER_KM_RATE_RS}/km • Total: ₹${(distanceKm * PER_KM_RATE_RS).toFixed(2)}` : ''}
                  </Text>
                  <DownArrow />
                </View>
              </View>
            ) : (
              <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Clock />
                <Text
                  style={{
                    fontSize: windowWidth(14),
                    fontWeight: '600',
                    color: color.secondaryText,
                    marginLeft: windowWidth(8),
                  }}
                >
                  Select a destination to see travel time
                </Text>
              </View>
            )}
          </TouchableOpacity>

          {/* --- Current Location Display --- */}
          <View
            style={{
              width: '100%',
              borderWidth: 1,
              borderColor: '#DDD',
              borderRadius: 12,
              marginTop: windowHeight(12),
              paddingHorizontal: windowWidth(12),
              paddingVertical: windowHeight(12),
              backgroundColor: '#FFF',
            }}
          >
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <PickLocation />
              <View style={{ flex: 1, marginLeft: 8 }}>
                <Text
                  style={{
                    color: '#2371F0',
                    fontSize: 14,
                    fontWeight: '600',
                    marginBottom: 4,
                  }}
                >
                  Current Location
                </Text>
                <Text
                  style={{
                    fontSize: 13,
                    color: color.secondaryText,
                  }}
                  numberOfLines={2}
                >
                  {currentLocationName}
                </Text>
              </View>
            </View>
          </View>

          {/* --- Destination Search --- */}
          <View
            style={{
              width: '100%',
              borderWidth: 1,
              borderColor: '#DDD',
              borderRadius: 12,
              marginVertical: windowHeight(12),
              paddingHorizontal: windowWidth(12),
              paddingVertical: windowHeight(12),
              backgroundColor: '#FFF',
            }}
          >
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                marginBottom: windowHeight(8),
              }}
            >
              <PlaceHolder />
              <Text
                style={{
                  color: '#2371F0',
                  fontSize: 16,
                  fontWeight: '600',
                  marginLeft: 8,
                }}
              >
                Destination
              </Text>
            </View>

            <TextInput
              style={{
                height: 44,
                color: '#000',
                fontSize: 16,
                borderWidth: 1,
                borderColor: '#CCC',
                borderRadius: 8,
                paddingHorizontal: 14,
                paddingVertical: 10,
                backgroundColor: '#FFF',
              }}
              placeholder="Where to?"
              placeholderTextColor="#999"
              value={query}
              onChangeText={handleInputChange}
              onFocus={() => setKeyboardAvoidHeight(true)}
              onBlur={() => {
                setTimeout(() => setKeyboardAvoidHeight(false), 200);
              }}
            />

            {destinationName && locationSelected && (
              <Text
                style={{
                  fontSize: 13,
                  color: color.secondaryText,
                  marginTop: 8,
                }}
                numberOfLines={2}
              >
                {destinationName}
              </Text>
            )}
          </View>

          {/* --- Search Results (Places List) --- */}
          {places.length > 0 && (
            <ScrollView
              style={{ maxHeight: windowHeight(200) }}
              contentContainerStyle={{ paddingBottom: windowHeight(12) }}
              keyboardShouldPersistTaps="handled"
            >
              {places.map((place: any, index: number) => (
                <Pressable
                  key={place.place_id || index}
                  style={{
                    flexDirection: 'row',
                    alignItems: 'center',
                    paddingVertical: 12,
                    paddingHorizontal: 12,
                    backgroundColor: '#FFF',
                    borderBottomWidth: 1,
                    borderBottomColor: '#F0F0F0',
                    borderRadius: 8,
                    marginBottom: 4,
                  }}
                  onPress={() => handlePlaceSelect(place.place_id)}
                >
                  <PickLocation />
                  <View style={{ flex: 1, marginLeft: 12 }}>
                    <Text
                      style={{
                        fontSize: 15,
                        fontWeight: '600',
                        color: '#000',
                        marginBottom: 2,
                      }}
                    >
                      {place.structured_formatting?.main_text ||
                        place.description}
                    </Text>
                    <Text
                      style={{
                        fontSize: 13,
                        color: color.secondaryText,
                      }}
                      numberOfLines={1}
                    >
                      {place.structured_formatting?.secondary_text || ''}
                    </Text>
                  </View>
                </Pressable>
              ))}
            </ScrollView>
          )}

          {/* --- Available Buses Section --- */}
          {showBusSection && (
            <View
              style={{
                width: '100%',
                marginTop: windowHeight(12),
              }}
            >
              <View
                style={{
                  flexDirection: 'row',
                  alignItems: 'center',
                  marginBottom: windowHeight(12),
                }}
              >
                <Text
                  style={{
                    fontSize: windowWidth(18),
                    fontWeight: '600',
                    color: color.primaryText,
                  }}
                >
                  🚌 Available Buses
                </Text>
              </View>

              {loadingBuses ? (
                <View
                  style={{
                    backgroundColor: '#FFF',
                    borderRadius: 12,
                    padding: windowWidth(20),
                    alignItems: 'center',
                  }}
                >
                  <ActivityIndicator size="large" color="#2371F0" />
                  <Text
                    style={{
                      marginTop: 12,
                      color: color.secondaryText,
                      fontSize: 14,
                    }}
                  >
                    Finding available buses...
                  </Text>
                </View>
              ) : buses.length > 0 ? (
                <FlatList
                  data={buses}
                  renderItem={renderBusCard}
                  keyExtractor={(item) => item.id}
                  showsVerticalScrollIndicator={false}
                  scrollEnabled={false}
                />
              ) : (
                <View
                  style={{
                    backgroundColor: '#FFF',
                    borderRadius: 12,
                    padding: windowWidth(20),
                    alignItems: 'center',
                    borderWidth: 1,
                    borderColor: '#E0E0E0',
                  }}
                >
                  <Text style={{ fontSize: 40, marginBottom: 12 }}>🚌</Text>
                  <Text
                    style={{
                      fontSize: 16,
                      fontWeight: '600',
                      color: color.primaryText,
                      marginBottom: 4,
                    }}
                  >
                    No Buses Available
                  </Text>
                  <Text
                    style={{
                      fontSize: 14,
                      color: color.secondaryText,
                      textAlign: 'center',
                    }}
                  >
                    No bus routes found for this journey. Try another
                    destination or use other transport options.
                  </Text>
                </View>
              )}
            </View>
          )}
        </View>
      </View>
    </KeyboardAvoidingView>
  );
}