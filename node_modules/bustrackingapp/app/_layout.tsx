import * as SplashScreen from "expo-splash-screen";
import { useEffect } from "react";
import "react-native-reanimated";
import { Stack } from "expo-router";
import { ToastProvider } from "react-native-toast-notifications";
import { LogBox } from "react-native";
import { useFonts } from "expo-font";
import { getCurrentLocale } from "../utils/locale";
import * as Crypto from 'expo-crypto';

// Polyfill crypto.getRandomValues for uuid using expo-crypto for better security
if (typeof global.crypto === 'undefined') {
  global.crypto = {
    getRandomValues: Crypto.getRandomValues,
  } as any;
}

export {
  // Catch any errors thrown by the Layout component.
  ErrorBoundary,
} from "expo-router";

// Prevent the splash screen from auto-hiding before asset loading is complete.
// SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  // Define font configuration for better maintainability
  const fontConfig = {
    "TT-Octosquares-Medium": require("../assets/fonts/TT-Octosquares-Medium.ttf"),
  };

  const [loaded, error] = useFonts(fontConfig);

  useEffect(() => {
    // Prevent splash screen from auto-hiding before asset loading is complete
    SplashScreen.preventAutoHideAsync();

    // Ignore specific logs to avoid clutter, but allow critical errors
    LogBox.ignoreLogs([
      'Warning: ...', // Add specific warnings to ignore if needed
    ]);

    // Initialize locale detection on app start with error handling
    try {
      const locale = getCurrentLocale();
      console.log('Current locale:', locale);
    } catch (err) {
      console.error('Error initializing locale:', err);
    }

    // Hide splash screen once fonts are loaded or if there's an error
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  // Show loading state while fonts are loading
  if (!loaded && !error) {
    return null;
  }

  // Handle font loading errors gracefully
  if (error) {
    console.error('Font loading error:', error);
    // Optionally render a fallback UI
    return null; // Or a simple error component
  }

  return <RootLayoutNav />;
}

function RootLayoutNav() {
  return (
    <ToastProvider>
      <Stack screenOptions={{ headerShown: false }}>
        {/* Main entry point */}
        <Stack.Screen name="index" />
        {/* Onboarding flow */}
        <Stack.Screen name="/(routes)/onboarding/index" />
        {/* Authentication routes */}
        <Stack.Screen name="/(routes)/login/index" />
        <Stack.Screen name="/(routes)/otp-verification/index" />
        <Stack.Screen name="/(routes)/registration/index" />
        {/* Ride planning */}
        <Stack.Screen name="/(routes)/rideplan/index" />
        {/* Tab navigation */}
        <Stack.Screen name="/(tabs)/home" />
        <Stack.Screen name="/(tabs)/map" />
        <Stack.Screen name="/(tabs)/history" />
        <Stack.Screen name="/(tabs)/services" />
        <Stack.Screen name="/(tabs)/profile/index" />
      </Stack>
    </ToastProvider>
  );
}
