import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, Alert, TextInput, TouchableOpacity, ScrollView, FlatList } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import * as Location from 'expo-location';
import axios from 'axios';
import color from '@/themes/app.colors';

interface BusStop {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  address: string;
  distance: number;
}

interface LiveBus {
  id: string;
  busNumber: string;
  routeName: string;
  latitude: number;
  longitude: number;
  currentStop: string;
  nextStop: string;
  eta: string;
  distance: string;
  speed: string;
  occupancy: string;
  isActive: boolean;
  destinationLat: number;
  destinationLng: number;
}

export default function MapScreen() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [busStops, setBusStops] = useState<BusStop[]>([]);
  const [liveBuses, setLiveBuses] = useState<LiveBus[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredBuses, setFilteredBuses] = useState<LiveBus[]>([]);
  const [showBusList, setShowBusList] = useState(false);

  useEffect(() => {
    getCurrentLocation();
  }, []);

  useEffect(() => {
    if (location) {
      fetchNearbyStops();
      fetchLiveBuses();
      const interval = setInterval(fetchLiveBuses, 10000);
      return () => clearInterval(interval);
    }
  }, [location]);

  useEffect(() => {
    if (searchQuery) {
      const filtered = liveBuses.filter(bus =>
        bus.busNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
        bus.routeName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        bus.currentStop.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredBuses(filtered);
    } else {
      setFilteredBuses(liveBuses);
    }
  }, [searchQuery, liveBuses]);

  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
    const R = 6371; // Radius of the Earth in km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // Distance in km
  };



  const getCurrentLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setError('Permission denied to access location');
        setLoading(false);
        return;
      }

      const loc = await Location.getCurrentPositionAsync({});
      setLocation(loc);
    } catch (err) {
      console.error('Error getting location:', err);
      setError('Failed to get current location');
      setLoading(false);
    }
  };

  const fetchNearbyStops = async () => {
    if (!location) return;

    try {
      // Replace with your API if needed
      const response = await axios.get('http://localhost:8080/api/v1/bus/nearby-stops', {
        params: {
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          radius: 3000
        }
      });

      if (response.data.success) {
        setBusStops(response.data.data);
      }
    } catch {
      // Mock Kerala data for demo
      setBusStops([
        {
          id: 'KSRTC_TVM',
          name: 'Thiruvananthapuram Central Bus Stand',
          latitude: 8.4875,
          longitude: 76.9525,
          address: 'Thampanoor, Kerala',
          distance: 1200,
        },
        {
          id: 'Ernakulam',
          name: 'Ernakulam KSRTC Bus Stand',
          latitude: 9.9816,
          longitude: 76.2999,
          address: 'Ernakulam, Kerala',
          distance: 42000,
        },
        {
          id: 'Kollam',
          name: 'Kollam Bus Stand',
          latitude: 8.8932,
          longitude: 76.6141,
          address: 'Kollam, Kerala',
          distance: 72000,
        }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const fetchLiveBuses = async () => {
    if (!location) return;
    try {
      const res = await axios.get('http://localhost:8080/api/v1/bus/live');
      if (res.data.success) {
        setLiveBuses(res.data.data);
      }
    } catch {
      // Mock buses in Kerala
      setLiveBuses([
        {
          id: 'bus101',
          busNumber: 'KSRTC-101',
          routeName: 'Thampanoor to Ernakulam',
          latitude: 8.95,
          longitude: 76.65,
          currentStop: 'Varkala',
          nextStop: 'Attingal',
          eta: '6 mins',
          distance: '2.1 km',
          speed: '42 km/h',
          occupancy: '65%',
          isActive: true,
          destinationLat: 9.9816,
          destinationLng: 76.2999
        },
        {
          id: 'bus202',
          busNumber: 'KSRTC-202',
          routeName: 'Kollam to Thiruvananthapuram',
          latitude: 8.75,
          longitude: 76.85,
          currentStop: 'Kottiyam',
          nextStop: 'Chattannoor',
          eta: '12 mins',
          distance: '4.5 km',
          speed: '36 km/h',
          occupancy: '55%',
          isActive: true,
          destinationLat: 8.4875,
          destinationLng: 76.9525
        }
      ]);
    }
  };

  const calculateETA = (distance: number): string => {
    const avgSpeed = 5; // km/h
    const minutes = Math.round((distance / 1000 / avgSpeed) * 60);
    if (minutes < 1) return 'Arriving now';
    if (minutes === 1) return '1 min';
    return `${minutes} mins`;
  };

  if (loading)
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={color.buttonBg} />
        <Text style={styles.loadingText}>Fetching map data...</Text>
      </View>
    );

  if (error)
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );

  if (!location)
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Unable to detect current location.</Text>
      </View>
    );

  return (
    <View style={styles.container}>
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search buses by number, route, or stop..."
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
        <TouchableOpacity
          style={styles.searchButton}
          onPress={() => setShowBusList(!showBusList)}
        >
          <Text style={styles.searchButtonText}>
            {showBusList ? 'Hide List' : 'Show List'}
          </Text>
        </TouchableOpacity>
      </View>

      {showBusList && (
        <View style={styles.busListContainer}>
          <Text style={styles.busListTitle}>
            Live Buses ({filteredBuses.length})
          </Text>
          <FlatList
            data={filteredBuses}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => {
              const distanceToDestination = calculateDistance(
                location.coords.latitude,
                location.coords.longitude,
                item.destinationLat,
                item.destinationLng
              );
              return (
                <View style={styles.busItem}>
                  <View style={styles.busHeader}>
                    <Text style={styles.busNumber}>{item.busNumber}</Text>
                    <Text style={styles.busETA}>{item.eta}</Text>
                  </View>
                  <Text style={styles.busRoute}>{item.routeName}</Text>
                  <View style={styles.busDetails}>
                    <Text style={styles.busDetail}>Current: {item.currentStop}</Text>
                    <Text style={styles.busDetail}>Next: {item.nextStop}</Text>
                    <Text style={styles.busDetail}>Distance to Destination: {distanceToDestination.toFixed(1)} km</Text>
                    <Text style={styles.busDetail}>Speed: {item.speed}</Text>
                    <Text style={styles.busDetail}>Occupancy: {item.occupancy}</Text>
                  </View>
                </View>
              );
            }}
            showsVerticalScrollIndicator={false}
            style={styles.busList}
          />
        </View>
      )}

      <MapView
        style={showBusList ? styles.mapWithList : styles.map}
        initialRegion={{
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        }}
        showsUserLocation={true}
        showsMyLocationButton={true}
      >
        {/* Bus Stops */}
        {busStops.map(stop => (
          <Marker
            key={stop.id}
            coordinate={{
              latitude: stop.latitude,
              longitude: stop.longitude,
            }}
            title={stop.name}
            description={stop.address}
          >
            <View style={styles.stopMarker} />
          </Marker>
        ))}

        {/* Live Buses */}
        {liveBuses.map(bus => (
          <Marker
            key={bus.id}
            coordinate={{
              latitude: bus.latitude,
              longitude: bus.longitude,
            }}
            title={bus.busNumber}
            description={`${bus.routeName} - ${bus.currentStop}`}
          >
            <View style={styles.busMarker} />
          </Marker>
        ))}
      </MapView>

      <View style={styles.infoContainer}>
        <Text style={styles.infoText}>
          {busStops.length} stops â€¢ {liveBuses.length} live buses
        </Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { flex: 1 },
  mapWithList: { flex: 0.6 },
  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'white' },
  loadingText: { marginTop: 10, fontSize: 16, color: 'black' },
  errorContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'white' },
  errorText: { fontSize: 16, color: 'red', textAlign: 'center' },
  userMarker: { width: 16, height: 16, backgroundColor: 'blue', borderRadius: 8, borderWidth: 2, borderColor: '#fff' },
  stopMarker: { width: 14, height: 14, backgroundColor: 'red', borderRadius: 7 },
  busMarker: { width: 14, height: 14, backgroundColor: 'green', borderRadius: 7 },
  markerLabel: { backgroundColor: 'white', padding: 3, borderRadius: 5, fontSize: 10, textAlign: 'center' },
  infoContainer: { position: 'absolute', top: 50, left: 20, right: 20, backgroundColor: 'white', padding: 10, borderRadius: 8, elevation: 5 },
  infoText: { fontSize: 14, color: 'black', textAlign: 'center' },
  searchContainer: { flexDirection: 'row', padding: 10, backgroundColor: 'white', elevation: 3 },
  searchInput: { flex: 1, borderWidth: 1, borderColor: '#ccc', borderRadius: 8, padding: 10, marginRight: 10 },
  searchButton: { backgroundColor: color.buttonBg, padding: 10, borderRadius: 8, justifyContent: 'center' },
  searchButtonText: { color: 'white', fontWeight: 'bold' },
  busListContainer: { flex: 0.4, backgroundColor: 'white', padding: 10 },
  busListTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10, color: 'black' },
  busList: { flex: 1 },
  busItem: { backgroundColor: '#f9f9f9', padding: 10, marginBottom: 10, borderRadius: 8, borderWidth: 1, borderColor: '#eee' },
  busHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 5 },
  busNumber: { fontSize: 16, fontWeight: 'bold', color: 'black' },
  busETA: { fontSize: 14, color: 'green', fontWeight: 'bold' },
  busRoute: { fontSize: 14, color: '#666', marginBottom: 5 },
  busDetails: { flexDirection: 'row', flexWrap: 'wrap' },
  busDetail: { fontSize: 12, color: '#666', marginRight: 10, marginBottom: 2 }
});
